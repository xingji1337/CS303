//Xing Ji - CS303 Assignment 3
#ifndef LIST_QUEUE_TC_
#define LIST_QUEUE_TC_


/** Constructs an empty queue.*/
template<typename Item_Type>
	queue<Item_Type>::queue() {}

/**pushses and item onto the back of the queue.
@param item The item to be inserted*/
template<typename Item_Type>
	void queue<Item_Type>::push(const Item_Type& item)
	{
		container.push_back(item);
	}

/**Returns a reference to the object at the front of the queue with out removing it.
@return A reference to the object at the front of the queue*/
template<typename Item_Type>
	Item_Type& queue<Item_Type>::front()
	{
		return container.front();
	}

/**Returns a const reference to the object at the front of the queue without removing it.
@return A const reference to the object at the front of the queue*/
template<typename Item_Type>
	const Item_Type& queue<Item_Type>::front() const
	{
		return container.front();
	}
/**Removes the front item from the queue.*/
template<typename Item_Type>
	void queue<Item_Type>::pop()
	{
		container.pop_front();
	}
	
/**Determines whether the queue is empty. */
template<typename Item_Type>
	bool queue<Item_Type>::empty() const
	{
		return container.empty();
	}

/** Returns the number of items in the queue */
template<typename Item_Type>
	size_t queue<Item_Type>::size() const
	{
		return container.size();
	}
	
/**Moves the item at the front of the queue to the rear of the queue*/
template<typename Item_Type>
	void queue<Item_Type>::move_to_rear()
	{
		this->push(this->front());
		this->pop();
	}

#endif